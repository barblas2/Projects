
import pvlib
import pandas as pd
from datetime import datetime
import numpy as np
import matplotlib.pyplot as plt
d65=pd.read_csv("C:\\Users\\Bar Blas\\Desktop\\kd-optim\\kd-optim\\input\\illuminant-C-D65.csv")


# Define the location for Eilat, Israel
location = pvlib.location.Location(latitude=29.5581, longitude=34.9482, tz='Asia/Jerusalem', altitude=13)

# Define the time range for which to calculate the solar position and irradiance
times = pd.date_range(
    start=datetime(2024, 8, 6, 6, 0, 0),
    end=datetime(2024, 8, 6, 10, 0, 0),
    freq='H', tz=location.tz)

# Calculate the solar position
solar_position = location.get_solarposition(times)

# Calculate the clear sky irradiance using the Ineichen model
clear_sky = location.get_clearsky(times, model='ineichen')

# Calculate the relative airmass
relative_airmass = pvlib.atmosphere.get_relative_airmass(solar_position['apparent_zenith'])

# Calculate spectral data using the Simple Model of the Atmospheric Radiative Transfer of Sunshine (SMARTS)
spectral_data = pvlib.spectrum.spectrl2(
    apparent_zenith=solar_position['apparent_zenith'],
    aoi=0,  # Angle of incidence, assuming normal incidence
    surface_tilt=0,  # Assuming horizontal surface
    ground_albedo=0.2,  # Typical ground albedo
    surface_pressure=101325,  # Standard atmospheric pressure in Pascals
    #relative_humidity=50,  # Typical relative humidity
    ozone=0.3,  # Typical ozone column in cm
    precipitable_water=1.5,  # Typical precipitable water in cm
    aerosol_turbidity_500nm=0.1,  # Typical aerosol optical depth at 500 nm
    relative_airmass=relative_airmass
)

#nrows, ncols = 2, 1
#fig, axs = plt.subplots(nrows, ncols, figsize=(10*ncols, 5*nrows))
waves = spectral_data['wavelength']
model_L = spectral_data['poa_global'][np.logical_and(300 < waves, waves < 830)]
model_L = model_L + spectral_data['poa_direct'][np.logical_and(300 < waves, waves < 830)]
waves = waves[np.logical_and(300 < waves, waves < 830)]
d_light=np.interp(waves,d65.iloc[:,0].to_numpy(),d65.iloc[:,1].to_numpy())
plt.plot(waves, d_light/d_light.max(),color='black')
print(np.shape(model_L)[1])
for i in range(np.shape(model_L)[1]):
    plt.plot(waves, model_L[:,i]/model_L[:,i].max())
plt.show()