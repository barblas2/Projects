import torch
import pvlib
from pathlib import Path
import numpy as np
import typer
app = typer.Typer(pretty_exceptions_show_locals=False)
import pv_light
import matplotlib.pyplot as plt
plt.style.use('dark_background')
plt.rcParams['figure.facecolor']  = '#222'
plt.rcParams['axes.facecolor']    = '#222'
plt.rcParams['savefig.facecolor'] = '#222'
from datetime import datetime
import colorlab.disk as disk
import colorlab.mini as mini
from colorlab.consider import consider
from colorlab.bernstein import bernstein_matrix

import tools

@app.command(name='main')
def main(
        path_R: str = typer.Option(..., '--chart'),
        path_S: str = typer.Option(..., '--camera'),
        num_samples: int = typer.Option(50, '--samples'),
        outdir: str = typer.Option(),
        noise_data: float = typer.Option(),
        noise_opt: float = typer.Option(),
        dim_kd: int = typer.Option(..., '--dim-kd'),
):
    torch.manual_seed(0)

    outpath = lambda path: Path(outdir).joinpath(path)

    waves_R, R = consider(disk.load_matrix(path_R)).map(lambda X: (X[:,0], X[:,1:])).content
    waves_S, S = consider(disk.load_matrix(path_S)).map(lambda X: (X[:,0], X[:,1:].T)).content
    waves_light,new_light = pv_light.light(start=datetime(2024, 8, 6, 10, 0, 0), end=datetime(2024, 8, 6, 10, 0, 0))
    new_light = np.interp(np.array(waves_R), np.array(waves_light), new_light)
    make_B = lambda resolution: bernstein_matrix(torch.linspace(0, 1, len(waves_R)), resolution)

    basis_L = make_B(5)
    basis_true_kd = make_B(5)
    basis_kd = make_B(dim_kd)
    true_surf_L = torch.tensor(new_light)
    true_surf_L=true_surf_L.to(torch.float32)
    true_surf_L_bern = basis_L @ torch.tensor([0.6, 1.0, 1.0, 0.6, 0.6])
    true_kd = consider(basis_true_kd @ torch.tensor([0.4, 0.3, 0.2, 0.9, 1.0])*0.15)\
        .map(lambda kd: kd + 0.05*kd.mean()*torch.randn_like(kd)).content
    depth = 10
    true_deep_L = true_surf_L*torch.exp(-true_kd*depth)
    noiseless_Y = tools.capture(S, R, true_deep_L)






    noisy_Y = noiseless_Y + noise_data*noiseless_Y.mean()*torch.randn_like(noiseless_Y)

    # Loss ---------------------------------------------------------------------
    stoch_Y = lambda : noisy_Y + noise_opt*noisy_Y.mean()*torch.randn_like(noisy_Y)
    # Monte Carlo sampling -----------------------------------------------------
    samples_kd = []
    means=[]
    num_runs=2
    for i in range(num_samples):
        static_noise = noise_data*noisy_Y.mean()*torch.randn_like(noisy_Y)
        def loss_fn(kd):
            pred_Y = tools.capture(S, R, true_surf_L*torch.exp(-kd*depth))
            return (pred_Y - stoch_Y() + static_noise).pow(2).mean()
        collapsed_Y = stoch_Y()

        print(f'Processing ({i+1}/{num_samples})')
        kd = mini.Minimizer()\
            .set_parameters(param_kd = torch.zeros(dim_kd))\
            .set_parameter_maps(param_kd = lambda x: basis_kd @ x)\
            .set_optimizer_args(lr=1e-2)\
            .set_scheduler_args(patience=100)\
            .fit(loss_fn, lr_stop=1e-7, print_every=10)
                #.set_parameter_noises(param_kd = lambda x: x + 0.01*x.mean()*torch.randn_like(x))\

        samples_kd.append(kd)
    # Plots --------------------------------------------------------------------
    nrows, ncols = 2, 1
    fig, axs = plt.subplots(nrows, ncols, figsize=(10*ncols, 5*nrows))
    stacked=(torch.tensor(torch.stack(samples_kd)))
    mean_kd = torch.mean(stacked,0)
    for kd in samples_kd:
        axs[0].plot(waves_R, kd, color='#ff44ff', linestyle='solid', linewidth=0.1)
    axs[0].plot(waves_R, true_kd, color='#44ff44', linestyle='dotted', linewidth=3, label='true_surf_L')
    axs[0].legend()
    axs[0].set_ylim(0, true_kd.max()*1.1)

    fig.savefig(outpath(f'plot-{noise_data:2.2f}-{noise_opt:2.2f}.pdf'))

def plot_crap():
    # Plot ---------------------------------------------------------------------
    nrows, ncols = 2, 1
    fig, axs = plt.subplots(nrows, ncols, figsize=(10*ncols, 5*nrows))

    # light ....................................................................
    axs[0].plot(waves_R, true_surf_L, color='#ffffff', linewidth=3, label='true_surf_L')
    axs[0].set_ylim(0, true_surf_L.max()*1.1)
    axs[0].legend()

    # kd .......................................................................
    axs[1].plot(waves_R, true_kd, color='#ffffff', linewidth=3, label='true_kd')
    axs[1].set_ylim(0, true_kd.max()*1.1)
    axs[1].legend()

    fig.savefig(outpath('plot.pdf'))

@app.command(name='test')
def test():
    print('test')




@app.command(name='main_old')
def main(
        path_R: str = typer.Option(..., '--chart'),
        path_S: str = typer.Option(..., '--camera'),
        num_samples: int = typer.Option(50, '--samples'),
        outdir: str = typer.Option(),
        noise_data: float = typer.Option(),
        noise_opt: float = typer.Option(),
        dim_kd: int = typer.Option(..., '--dim-kd'),
):
    torch.manual_seed(0)

    outpath = lambda path: Path(outdir).joinpath(path)

    waves_R, R = consider(disk.load_matrix(path_R)).map(lambda X: (X[:, 0], X[:, 1:])).content
    waves_S, S = consider(disk.load_matrix(path_S)).map(lambda X: (X[:, 0], X[:, 1:].T)).content

    make_B = lambda resolution: bernstein_matrix(torch.linspace(0, 1, len(waves_R)), resolution)
    basis_L = make_B(5)
    basis_true_kd = make_B(5)
    basis_kd = make_B(dim_kd)

    true_surf_L = basis_L @ torch.tensor([0.6, 1.0, 1.0, 0.6, 0.6])
    true_kd = consider(basis_true_kd @ torch.tensor([0.4, 0.3, 0.2, 0.9, 1.0]) * 0.15) \
        .map(lambda kd: kd + 0.05 * kd.mean() * torch.randn_like(kd)).content

    depth = 10
    true_deep_L = true_surf_L * torch.exp(-true_kd * depth)

    noiseless_Y = tools.capture(S, R, true_deep_L)
    noisy_Y = noiseless_Y + noise_data * noiseless_Y.mean() * torch.randn_like(noiseless_Y)

    # Loss ---------------------------------------------------------------------
    stoch_Y = lambda: noisy_Y + noise_opt * noisy_Y.mean() * torch.randn_like(noisy_Y)
    # Monte Carlo sampling -----------------------------------------------------
    means = []
    num_runs = 2
    all_sampels=[]
    opt_error = [0.01,0.05,0.1,0.5,1]
    for noise_opt in opt_error:
        for i in range(num_samples):
            samples_kd = []
            static_noise = noise_data * noisy_Y.mean() * torch.randn_like(noisy_Y)
            def loss_fn(kd):
                pred_Y = tools.capture(S, R, true_surf_L * torch.exp(-kd * depth))
                return (pred_Y - stoch_Y() + static_noise).pow(2).mean()

            collapsed_Y = stoch_Y()

            print(f'Processing ({i + 1}/{num_samples})')
            kd = mini.Minimizer() \
                .set_parameters(param_kd=torch.zeros(dim_kd)) \
                .set_parameter_maps(param_kd=lambda x: basis_kd @ x) \
                .set_optimizer_args(lr=1e-2) \
                .set_scheduler_args(patience=100) \
                .fit(loss_fn, lr_stop=1e-7, print_every=10)
            # .set_parameter_noises(param_kd = lambda x: x + 0.01*x.mean()*torch.randn_like(x))\

            samples_kd.append(kd)
            all_sampels.append([samples_kd])
        stacked = (torch.tensor(torch.stack(samples_kd)))
        mean_kd = torch.mean(stacked, 0)
        means.append(mean_kd)
    # Plots --------------------------------------------------------------------
    nrows, ncols = 2, 1
    fig, axs = plt.subplots(nrows, ncols, figsize=(10 * ncols, 5 * nrows))
    stacked = (torch.tensor(torch.stack(samples_kd)))
    mean_kd = torch.mean(stacked, 0)
    for kd in range(len(means)):
        axs[0].plot(waves_R, means[kd], linestyle='solid', linewidth=2,label=f'opt error{opt_error[kd]}')
    axs[0].plot(waves_R, true_kd, color='#44ff44', linestyle='dotted', linewidth=3, label='true_surf_L')
    axs[0].legend()
    axs[0].set_ylim(0, true_kd.max() * 1.1)

    fig.savefig(outpath(f'plot-{noise_data:2.2f}-{noise_opt:2.2f}.pdf'))


def plot_crap():
    # Plot ---------------------------------------------------------------------
    nrows, ncols = 2, 1
    fig, axs = plt.subplots(nrows, ncols, figsize=(10 * ncols, 5 * nrows))

    # light ....................................................................
    axs[0].plot(waves_R, true_surf_L, color='#ffffff', linewidth=3, label='true_surf_L')
    axs[0].set_ylim(0, true_surf_L.max() * 1.1)
    axs[0].legend()

    # kd .......................................................................
    axs[1].plot(waves_R, true_kd, color='#ffffff', linewidth=3, label='true_kd')
    axs[1].set_ylim(0, true_kd.max() * 1.1)
    axs[1].legend()

    fig.savefig(outpath('plot.pdf'))


@app.command(name='test')
def test():
    print('test')


if __name__ == '__main__': app()













@app.command(name='main_last')
def main(
        path_R: str = typer.Option(..., '--chart'),
        path_S: str = typer.Option(..., '--camera'),
        num_samples: int = typer.Option(50, '--samples'),
        outdir: str = typer.Option(),
        noise_data: float = typer.Option(),
        noise_opt: float = typer.Option(),
        dim_kd: int = typer.Option(..., '--dim-kd'),
):
    torch.manual_seed(0)

    outpath = lambda path: Path(outdir).joinpath(path)

    waves_R, R = consider(disk.load_matrix(path_R)).map(lambda X: (X[:, 0], X[:, 1:])).content
    waves_S, S = consider(disk.load_matrix(path_S)).map(lambda X: (X[:, 0], X[:, 1:].T)).content

    make_B = lambda resolution: bernstein_matrix(torch.linspace(0, 1, len(waves_R)), resolution)
    basis_L = make_B(5)
    basis_true_kd = make_B(5)
    basis_kd = make_B(dim_kd)

    true_surf_L = basis_L @ torch.tensor([0.6, 1.0, 1.0, 0.6, 0.6])
    true_kd = consider(basis_true_kd @ torch.tensor([0.4, 0.3, 0.2, 0.9, 1.0]) * 0.15) \
        .map(lambda kd: kd + 0.05 * kd.mean() * torch.randn_like(kd)).content

    depth = 10
    true_deep_L = true_surf_L * torch.exp(-true_kd * depth)

    noiseless_Y = tools.capture(S, R, true_deep_L)
    noisy_Y = noiseless_Y + noise_data * noiseless_Y.mean() * torch.randn_like(noiseless_Y)

    # Loss ---------------------------------------------------------------------
    stoch_Y = lambda: noisy_Y + noise_opt * noisy_Y.mean() * torch.randn_like(noisy_Y)
    # Monte Carlo sampling -----------------------------------------------------

    all_sampels=[]
    opt_error=[0.01,0.05,0.1,0.5,1]
    data_error = [0.01,0.05,0.1,0.5,1]
    ind=0
    for noise_opt in opt_error:
        ind+=1
        for noise_data in data_error:
            means = []
            for i in range(num_samples):
                samples_kd = []
                static_noise = noise_data * noisy_Y.mean() * torch.randn_like(noisy_Y)
                def loss_fn(kd):
                    pred_Y = tools.capture(S, R, true_surf_L * torch.exp(-kd * depth))
                    return (pred_Y - stoch_Y() + static_noise).pow(2).mean()
                collapsed_Y = stoch_Y()
                print(f'Processing ({i + 1}/{num_samples})')
                kd = mini.Minimizer() \
                    .set_parameters(param_kd=torch.zeros(dim_kd)) \
                    .set_parameter_maps(param_kd=lambda x: basis_kd @ x) \
                    .set_optimizer_args(lr=1e-2) \
                    .set_scheduler_args(patience=100) \
                    .fit(loss_fn, lr_stop=1e-7, print_every=10)
                # .set_parameter_noises(param_kd = lambda x: x + 0.01*x.mean()*torch.randn_like(x))\
                samples_kd.append(kd)
                all_sampels.append([samples_kd])
            stacked = (torch.tensor(torch.stack(samples_kd)))
            mean_kd = torch.mean(stacked, 0)
            means.append(mean_kd)
    # Plots --------------------------------------------------------------------
        nrows, ncols = 10, 1
        fig, axs = plt.subplots(nrows, ncols, figsize=(10 * ncols, 5 * nrows))
        stacked = (torch.tensor(torch.stack(samples_kd)))
        mean_kd = torch.mean(stacked, 0)
        for kd in range(len(means)):
            print(kd,means)
            axs[ind].plot(waves_R, means[kd], linestyle='solid', linewidth=2,label=f'data_error{data_error[kd]}')
        axs[ind].plot(waves_R, true_kd, color='#44ff44', linestyle='dotted', linewidth=3, label='true_kd')
        axs[ind].legend()
        axs[ind].set_ylim(0, true_kd.max() * 1.1)
        axs[ind].set_title(f'opt error{noise_opt}')
        fig.savefig(outpath(f'plot-{noise_data:2.2f}-{noise_opt:2.2f}.pdf'))


def plot_crap():
    # Plot ---------------------------------------------------------------------
    nrows, ncols = 2, 1
    fig, axs = plt.subplots(nrows, ncols, figsize=(10 * ncols, 5 * nrows))

    # light ....................................................................
    axs[0].plot(waves_R, true_surf_L, color='#ffffff', linewidth=3, label='true_surf_L')
    axs[0].set_ylim(0, true_surf_L.max() * 1.1)
    axs[0].legend()

    # kd .......................................................................
    axs[1].plot(waves_R, true_kd, color='#ffffff', linewidth=3, label='true_kd')
    axs[1].set_ylim(0, true_kd.max() * 1.1)
    axs[1].legend()

    fig.savefig(outpath('plot.pdf'))


@app.command(name='test')
def test():
    print('test')



