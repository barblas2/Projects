import colorlab as cl
import torch
import pandas as pd
import matplotlib.pyplot as plt
def get_paths():
    return dict(        
        R = '../input/DGKcolorchart_reflectances.csv',
        S_old = '../input/Canon_10D_Huynh-2007.csv',
        S= "C:/Users/Bar Blas/Desktop/thesis/new_curves.csv",
        kds = '../input/JerlovWaterTypes.csv',
        L = '../input/illuminant-C-D65.csv',
        L_new= "C:/Users/Bar Blas/PycharmProjects/pvlib_optim/new_light.csv",
        L_rad="C:/Users/Public/images_project/experiment/L_rad.csv",
        #rgb = "C:/Users/Public/images_project/experiment/rgb/13_45.png.csv",
        rgb = "C:/Users/Public/images_project/experiment/rgb_median.csv",
        S_not_normal = 'C:/Users/Public/images_project/kappa_and_transmission/S_not_normal.csv',
        output =  '../output/',
    )
def get_settings():
    return dict(
        num_trials = 10,
        lr = 1e-3,
        patience = 10,
        lr_stop = 1e-7,
        smooth = 0.0,
        smooth_samples = 1,
        print_every = 100,
    )
def get_data():
    paths = get_paths()
    # Hardcode -----------------------------------------------------------------
    z = 5.5
    # Load ---------------------------------------------------------------------
    rgb = cl.read_matrix(paths['rgb'],header=None)
    #L = cl.read_matrix(paths['L_new'], header=None)[1:]
    L= cl.read_matrix(paths['L_rad'], header=None)
    waves_R, R = cl.pipe(cl.read_matrix(paths['R']), lambda X: (X[:,0], X[:,1:]))
    waves_S, S = cl.pipe(cl.read_matrix(paths['S']), lambda X: (X[:,0], X[:,1:].T))
    waves_L, old_L = cl.pipe(cl.read_matrix(paths['L']), lambda X: (X[:,0], X[:,1:]))
    waves_kds, kds = cl.pipe(cl.read_matrix(paths['kds'], header=None), lambda X: (X[:,0], X[:,1:]))
    new_waves_S, new_S = cl.pipe(cl.read_matrix(paths['S_not_normal']), lambda X: (X[:, 0], X[:, 1:].T))
    # Interpolate --------------------------------------------------------------
    S = cl.interp(waves_R, waves_S, S, dim=1)
    kds = cl.interp(waves_R, waves_kds, kds, dim=0)
    #kds = torch.cat([kds, torch.ones(kds.shape[0],1)], dim=1)
    L = cl.interp(waves_R, waves_R, L, dim=0).flatten()
    model=S @ (R * L.view(-1, 1))
    model=model.numpy()
    model=pd.DataFrame(model)
    model.to_csv("C:\\Users\\Public\\images_project\\kappa_and_transmission\\model.csv", index=False, header=None)
    S=new_S
    # Synthesize ---------------------------------------------------------------
    #kd = kds @ cl.pipe(torch.rand(kds.shape[1]), lambda x: x/x.sum())*10
    kd=kds[:,0]
    deep_L = L*torch.exp(-kd*z)
    Y = S@(R*deep_L.view(-1, 1))
    #Y = 10*rgb
    print(torch.std(rgb),'std')
    # Pack ---------------------------------------------------------------------

    
    knowns = dict(
        z = z,
        R = R,
        S = S,
        L = L,        
        Y = Y,
        waves = waves_R,
        basis_kd = kds, # Could use Bernstein matrix
    )
    unknowns = dict(
        deep_L = deep_L,
        kd = kd,
    )

    return knowns, unknowns
def get_static_noises():
    noises = dict(
        Y = lambda Y: Y + 4.1*torch.randn_like(Y)*Y.mean(),
        z = lambda z: z + 0.1*torch.randn(1)
    )
    reports = dict(
        #Y = 'Y + 0.1*torch.randn_like(Y)*Y.mean()',
        #z = 'z + 0.01*torch.randn(1)'
    )

    return noises, reports
