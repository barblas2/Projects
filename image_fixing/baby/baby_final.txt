import cv2
import matplotlib.pyplot as plt
import numpy as np
import random
from scipy import signal as sp
im=cv2.imread("C:\\Users\\Public\\git_images\\baby\\baby.tif",0)
dst = np.float32([[129, 5],
                            [129, 112],
                            [19, 112],
                            [19, 5]])
src = np.float32([[ 255,0],
                       [255,255],
                       [0,255],
                       [0,0]])
def find_transform(pointset1, pointset2):
    x = []
    xtag = []
    for i in pointset2:
        for j in i:
            xtag.append(j)
    for i in range(len(pointset1)):
        x.append([pointset1[i][0], pointset1[i][1], 0, 0, 1, 0, pointset1[i][0] * -pointset2[i][0],
                  pointset2[i][0] * -pointset1[i][1]])
        x.append([0, 0, pointset1[i][0], pointset1[i][1], 0, 1, pointset1[i][0] * -pointset2[i][1],
                  pointset2[i][1] *-pointset1[i][1]])
    x = np.array(x)
    xtag = np.array(xtag)
    calc = np.linalg.pinv(x)
    T = np.matmul(calc, xtag)
    T = np.append(T, 1)
    Tmat = np.zeros([3, 3])
    Tmat[0][0] = T[0]
    Tmat[0][1] = T[1]
    Tmat[0][2] = T[4]
    Tmat[1][0] = T[2]
    Tmat[1][1] = T[3]
    Tmat[1][2] = T[5]
    Tmat[2][0] = T[6]
    Tmat[2][1] = T[7]
    Tmat[2][2] = T[8]
    T = Tmat
    return (T)
find_transform(dst, src)

def transform_image(image, T):
    plt.subplot(121), plt.imshow(image, cmap='gray')
    plt.show()
    row, col = image.shape
    print(row,col)
    new = np.zeros((row, col))
    x, y = np.meshgrid([(range(0, col))], [(range(0, row))])
    x = x.ravel()
    y = y.ravel()
    tot = np.vstack((x, y))
    tot = np.transpose(tot)
    ones1 = np.full(256*256, 1)
    tot = np.c_[tot, ones1]
    inverseMatrix = np.linalg.inv(T)
    mat = inverseMatrix @ np.transpose(tot)
    mat[0]/=mat[2]
    mat[1]/=mat[2]
    mat = np.transpose(mat)
    mat=np.delete(mat, 2, 1)
    tot=np.delete(tot, 2, 1)
    neg=[]
    for i in range(tot.shape[0]):
        if mat[i][0]<0 or mat[i][1]<0:
            neg.append(i)
        if mat[i][1]>= image.shape[0]-20 or mat[i][0]>= image.shape[1]-20:
            neg.append(i)
    mat = np.delete(mat, neg, 0)
    tot = np.delete(tot, neg, 0)
    for i in range(len(tot)):
            new[tot[i][1]][tot[i][0]]=image[round(mat[i][0])][round(mat[i][1])]
    new = np.rot90(new)
    new = np.rot90(new)
    new = np.rot90(new)
    new = new.astype(np.uint8)
    cv2.imshow('first',new)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    plt.subplot(121), plt.imshow(im, cmap='gray')
    plt.subplot(122), plt.imshow(new, cmap='gray')
    plt.title('Input Image'), plt.xticks([]), plt.yticks([])
    plt.show()
    return (new)
new1=transform_image(cv2.imread("C:\\Users\\Public\\git_images\\baby\\baby.tif",0), np.array(
    [[ 2.31818182e+00 ,-4.73663971e-15 ,-4.40454545e+01], [ 3.40809227e-15 , 2.38317757e+00 ,-1.19158879e+01],
     [ 1.81717218e-17 , 1.52702955e-17 , 1.00000000e+00]]))
############2#########
dst2 = np.float32([[50, 121],
                            [120, 176],
                            [70, 250],
                            [4, 180]])
src2 = np.float32([[ 255,0],
                       [255,255],
                       [0,255],
                       [0,0]])
def find_transform(pointset1, pointset2):
    x = []
    xtag = []
    for i in pointset2:
        for j in i:
            xtag.append(j)
    for i in range(len(pointset1)):
        x.append([pointset1[i][0], pointset1[i][1], 0, 0, 1, 0, pointset1[i][0] * -pointset2[i][0],
                  pointset2[i][0] * -pointset1[i][1]])
        x.append([0, 0, pointset1[i][0], pointset1[i][1], 0, 1, pointset1[i][0] * -pointset2[i][1],
                  pointset2[i][1] *-pointset1[i][1]])
    x = np.array(x)
    xtag = np.array(xtag)
    calc = np.linalg.pinv(x)
    T = np.matmul(calc, xtag)
    T = np.append(T, 1)
    Tmat = np.zeros([3, 3])
    Tmat[0][0] = T[0]
    Tmat[0][1] = T[1]
    Tmat[0][2] = T[4]
    Tmat[1][0] = T[2]
    Tmat[1][1] = T[3]
    Tmat[1][2] = T[5]
    Tmat[2][0] = T[6]
    Tmat[2][1] = T[7]
    Tmat[2][2] = T[8]
    T = Tmat
    print(T)
    return (T)
find_transform(dst2, src2)

def transform_image(image, T):
    row, col = image.shape
    print(row,col)
    new = np.zeros((row, col))
    x, y = np.meshgrid([(range(0, col))], [(range(0, row))])
    x = x.ravel()
    y = y.ravel()
    tot = np.vstack((x, y))
    tot = np.transpose(tot)
    ones1 = np.full(256*256, 1)
    tot = np.c_[tot, ones1]
    inverseMatrix = np.linalg.inv(T)
    mat = inverseMatrix @ np.transpose(tot)
    mat[0]/=mat[2]
    mat[1]/=mat[2]
    mat = np.transpose(mat)
    mat=np.delete(mat, 2, 1)
    tot=np.delete(tot, 2, 1)
    neg=[]
    for i in range(tot.shape[0]):
        if mat[i][0]<0 or mat[i][1]<0:
            neg.append(i)
        if mat[i][1]>= image.shape[0]-20 or mat[i][0]>= image.shape[1]-20:
            neg.append(i)
    mat = np.delete(mat, neg, 0)
    tot = np.delete(tot, neg, 0)
    for i in range(len(tot)):
            new[tot[i][1]][tot[i][0]]=image[round(mat[i][0])][round(mat[i][1])]
    new = np.rot90(new)
    new = np.rot90(new)
    new = np.rot90(new)
    new = new.astype(np.uint8)
    cv2.imshow('second',new)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    plt.subplot(121), plt.imshow(im, cmap='gray')
    plt.subplot(122), plt.imshow(new, cmap='gray')
    plt.title('Input Image'), plt.xticks([]), plt.yticks([])
    plt.show()
    print(new)
    return(new)

new2=transform_image(cv2.imread("C:\\Users\\Public\\git_images\\baby\\baby.tif",0), np.array(
    [[ 3.47257397e+00 ,-3.27414117e+00 , 5.75455115e+02], [ 3.68453357e+00  ,2.87268719e+00, -5.31821829e+02],
     [1.53441092e-03 , 2.53926406e-03  ,1.00000000e+00]]))

########3##########

dst3 = np.float32([[244, 133],
                            [160, 245],
                            [115, 146],
                            [162, 76]])
src3 = np.float32([[ 255,0],
                       [255,255],
                       [0,255],
                       [0,0]])
def find_transform(pointset1, pointset2):
    x = []
    xtag = []
    for i in pointset2:
        for j in i:
            xtag.append(j)
    for i in range(len(pointset1)):
        x.append([pointset1[i][0], pointset1[i][1], 0, 0, 1, 0, pointset1[i][0] * -pointset2[i][0],
                  pointset2[i][0] * -pointset1[i][1]])
        x.append([0, 0, pointset1[i][0], pointset1[i][1], 0, 1, pointset1[i][0] * -pointset2[i][1],
                  pointset2[i][1] *-pointset1[i][1]])
    x = np.array(x)
    xtag = np.array(xtag)
    calc = np.linalg.pinv(x)
    T = np.matmul(calc, xtag)
    T = np.append(T, 1)
    Tmat = np.zeros([3, 3])
    Tmat[0][0] = T[0]
    Tmat[0][1] = T[1]
    Tmat[0][2] = T[4]
    Tmat[1][0] = T[2]
    Tmat[1][1] = T[3]
    Tmat[1][2] = T[5]
    Tmat[2][0] = T[6]
    Tmat[2][1] = T[7]
    Tmat[2][2] = T[8]
    T = Tmat
    print(T)
    return (T)
find_transform(dst3, src3)

def transform_image(image, T):
    row, col = image.shape
    print(row,col)
    new = np.zeros((row, col))
    x, y = np.meshgrid([(range(0, col))], [(range(0, row))])
    x = x.ravel()
    y = y.ravel()
    tot = np.vstack((x, y))
    tot = np.transpose(tot)
    ones1 = np.full(256*256, 1)
    tot = np.c_[tot, ones1]
    inverseMatrix = np.linalg.inv(T)
    mat = inverseMatrix @ np.transpose(tot)
    mat[0]/=mat[2]
    mat[1]/=mat[2]
    mat = np.transpose(mat)
    mat=np.delete(mat, 2, 1)
    tot=np.delete(tot, 2, 1)
    neg=[]
    for i in range(tot.shape[0]):
        if mat[i][0]<0 or mat[i][1]<0:
            neg.append(i)
        if mat[i][1]>= image.shape[0]-20 or mat[i][0]>= image.shape[1]-20:
            neg.append(i)
    mat = np.delete(mat, neg, 0)
    tot = np.delete(tot, neg, 0)
    for i in range(len(tot)):
            new[tot[i][1]][tot[i][0]]=image[round(mat[i][0])][round(mat[i][1])]
    new = np.rot90(new)
    new = np.rot90(new)
    new = np.rot90(new)
    new = new.astype(np.uint8)
    cv2.imshow('third',new)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    plt.subplot(121), plt.imshow(im, cmap='gray')
    plt.subplot(122), plt.imshow(new, cmap='gray')
    plt.title('Input Image'), plt.xticks([]), plt.yticks([])
    plt.show()
    return(new)

new3=transform_image(cv2.imread("C:\\Users\\Public\\git_images\\baby\\baby.tif",0), np.array(
    [[ -1.31384051e+01, -8.82150055e+00 , 2.79885566e+03], [  5.97478791e+00 ,-8.59530892e+00 ,-3.14672163e+02],
     [-2.25023439e-02 ,-1.28285098e-02  ,1.00000000e+00]]))
med=[]
radius=1
print(new1)
print(new2)
print(new3)
final=np.zeros([255,255])
for i in range(255):
    for j in range(255):
        #final[i][j]=np.median([new1[i-1][j+1],new1[i+1][j-1],new2[i-1][j+1],new2[i+1][j-1],new3[i+1][j-1],new3[i-1][j-1],new1[i+1][j],new1[i][j],new1[i][j+1],new1[i][j-1],new2[i][j],new2[i][j+1],new2[i][j-1],new2[i-1][j],new2[i+1][j],new3[i][j],new3[i][j+1],new3[i][j-1],new3[i-1][j],new3[i+1][j]])
            X, Y = np.meshgrid(np.arange(i - radius, i + radius + 1), np.arange(j - radius, j + radius + 1))
            for k in range(len(X.ravel())):
                med.append(new1[X.ravel()[k]][Y.ravel()[k]])
                med.append(new2[X.ravel()[k]][Y.ravel()[k]])
                med.append(new3[X.ravel()[k]][Y.ravel()[k]])
            final[i][j] = int(np.median(med))
            med = []
final = final.astype(np.uint8)
cv2.imshow('image window', final)
cv2.waitKey(0)
cv2.destroyAllWindows()