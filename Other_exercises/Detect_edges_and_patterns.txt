import cv2
import numpy as np
#from scipy.signal import convolve2d as conv
import matplotlib.pyplot as plt
from scipy import signal as sp



def clean_Gaussian_noise(im, radius, maskSTD):
    r = radius
    x = []
    for i in range(-r, r + 1):
        for j in range(-r, r + 1):
            x.append((np.exp(-((i ** 2) + (j ** 2)) / (2 * (maskSTD ** 2)))))
    filter = np.array(x).reshape(2 * r + 1, 2 * r + 1)
    filter = filter / (np.sum(filter))
    newim = sp.convolve2d(im, filter)
    newim = newim.astype(np.uint8)
    cleanIm = newim
    return cleanIm


def sobel(im):
    new = clean_Gaussian_noise(im, 1, 1)

    sx = [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]
    sy = [[1, 2, 1], [0, 0, 0], [-1, -2, -1]]
    newx = sp.convolve2d(new.astype(int), np.array(sx))
    newy = sp.convolve2d(new.astype(int), np.array(sy))
    final_image = np.sqrt(newx ** 2 + newy ** 2)
    final_image = final_image.astype(im.dtype)

    return final_image


def canny(im):
    im = cv2.GaussianBlur(im, (9, 9), 3)
    edges = cv2.Canny(im, 48, 113)
    return edges


def hough_circles(im):

    img = im.copy()
    img2 = cv2.GaussianBlur(img, (5, 9), 0)
    circles = cv2.HoughCircles(img2, cv2.HOUGH_GRADIENT, 1, 60, param1=200, param2=80, minRadius=0, maxRadius=0)
    circles = np.round(circles[0, :]).astype("int")

    for (x, y, r) in circles:
        cv2.circle(img, (x, y), r, (0, 255, 0), 2)


    return img


def hough_lines(im):
    edges = cv2.Canny(im, 180, 220, apertureSize=3)
    lines = cv2.HoughLines(edges, 1, np.pi / 180, 160)
    for line in lines:
        arr = np.array(line[0], dtype=np.float64)
        r, theta = arr
        a = np.cos(theta)
        b = np.sin(theta)
        x0 = a * r
        y0 = b * r
        x1 = int(x0 + 1000 * (-b))
        y1 = int(y0 + 1000 * (a))
        x2 = int(x0 - 1000 * (-b))
        y2 = int(y0 - 1000 * (a))
        cv2.line(im, (x1, y1), (x2, y2), (0, 0, 255), 2)

    return im
